@inject IComentariosOIAService ComentarioInconformidadService;

<EditForm Model="comentarioInconformidad" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="my-modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-backdrop fade show" @onclick="Cancel"></div>
        <div class="modal-dialog nuevoMargenModal" style="z-index: 1050">
            <!-- Pop it above the backdrop -->
            <div class="modal-content">
                <div class="contenedor">

                    <div class="encabezado">
                        <div class="alInicio">
                            <p>Acerca del certificado</p>
                        </div>
                        <div class="alFinal">
                            <i class="bi bi-x" @onclick="Cancel"></i>
                        </div>
                    </div>

                    <div class="cuerpo">
                        <div class="contenedorComentarios">
                            
                            <div class="targeta">
                                <div class="encabezadoTargeta">
                                    <div class="encabezadoInicio">
                                        <p>Comentario de certificado</p>
                                    </div>
                                </div>
                                <div class="cuerpoTargeta">
                                    <div class="apartadoComentario">
                                        <div class="comentario">

                                            @if (comentarioInconformidad == null)
                                            {
                                                <p>
                                                    No hay comentarios sobre el certificado de este reporte
                                                </p>
                                            }
                                            else
                                            {
                                                <p>
                                                    @comentarioInconformidad.ComentarioInconformidad
                                                </p>
                                            } 
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                        </div>


                    </div>

                    <div class="pie">
                        <button>ok</button>
                    </div>

                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    ComentariosInconformidadDTO comentarioInconformidad = new ComentariosInconformidadDTO();

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public int idComentarioInconformidad { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        comentarioInconformidad = await ComentarioInconformidadService.obtenerComentario(idComentarioInconformidad);
    }

    private async Task OnValidSubmit()
    {
        string ssres = string.Empty;

        if (idComentarioInconformidad == 0)
        {
            // ssres = await organismoService.AgregarOrganismo(organismo);
        }
        else
        {
            // ssres = await organismoService.EditarOrganismo(organismo, idOrganismoEditar);
        }

        if (ssres == "Ejecucion Correcta")
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(ssres));
        }
    }


    private async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    private async Task Cancel() => await BlazoredModal.CancelAsync();
}
