@page "/vistaComentariosSiget"
@inject SweetAlertService Sweet;
@inject TituloService tituloService;
@inject IComentarioSigetService comentarioSigetService;
@inject ITipoConformidadService tipoConformidadService;
@implements IAsyncDisposable;
@inject IHubRegistroService hubRegistroService;
@inject IHubActualizacionService hubActualizacionService;
@inject TooltipService tooltipService
@inject NotificationService NotificationService
@attribute [Authorize]


<section class="ContenedorGeneral">

    <h5 class="indice">Inicio > Apartado Comentario</h5>

    <section class="ContenidoPrincipal">

        <div class="barra">

            <div class="opciones">

                @* Apartado de Opciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

                <div class="tituloOpciones">
                    <p>Agregar Comentario</p>
                </div>

                <div class="botonesOpciones">

                    <button class="agregar" @onclick="@(()=> ShowModal(0))"><i class="bi bi-plus-circle"></i> Agregar</button>

                </div>

                <div class="tituloOpciones">
                    <p>Buscador</p>
                </div>

                <input @bind="valorBusqueda" @oninput="CargarComentarioBuscado" type="text" class="buscador" placeholder="Buscar Registro" />

                @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            </div>

            <div class="filtro">

                @* Apartado de Filtros mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

                <div class="tituloFiltro">
                    <p>Filtros para los comentarios</p>
                </div>

                <div class="contenidoFiltro">

                    <div class="espacioFiltro">

                        <h5>Filtrar por orden:</h5>

                        <div class="contenedorChecks">

                            @* apartado checks 2 *@

                            <div class="contenCheck">
                                <input @onclick="@(()=> OrdenarComentario("Ascendente"))" checked="@("Ascendente" == ordenSeleccionada)" type="checkbox" id="checkOrden1" name="checkOrden1" />
                                <label class="nombreCheck" for="checkOrden1">Ascendente</label>
                            </div>

                            <div class="contenCheck">
                                <input @onclick="@(()=> OrdenarComentario("Descendente"))" checked="@("Descendente" == ordenSeleccionada)" type="checkbox" id="checkOrden2" name="checkOrden2" />
                                <label class="nombreCheck" for="checkOrden2">Descendente</label>
                            </div>

                        </div>

                    </div>

                    <div class="espacioFiltro">

                        <h5>Filtrar por tipo:</h5>

                        <div class="contenedorChecks">

                            @* apartado checks 2 *@

                            @if (listaTipoConformidad != null)
                            {
                                @foreach (var item in listaTipoConformidad)
                                {
                                    <div class="contenCheck">
                                        <input @onclick="@(()=> FiltroTipo(item.IdTipoConformidad))" checked="@(item.IdTipoConformidad == tipoSeleccionado)" type="checkbox" id="@($"check{item.Tipos}")" />
                                        <label class="nombreCheck" for="@($"check{item.Tipos}")">@item.Tipos</label>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No se encontro rangos</p>
                            }

                        </div>

                    </div>

                </div>

                @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            </div>

        </div>

        <div class="contenido">

            @* Apartado de Contenido mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@
            
            @if (respuestaComentarios?.Resultado != null)
            {
                @foreach (var item in respuestaComentarios.Resultado)
                {
                    <div class="tarjeta">

                        <div class="encabezadoComentario">

                            <div class="tituloComentario">

                                <div class="texto">
                                    <p>@item.MotivoComentario</p>
                                </div>

                            </div>

                            <div class="generalesComentario">

                                <div class="general">
                                    <div class="iconoGeneral" @ref="@(elementRefs[$"{item.IdComentario}-tooltip0"])" @onmouseenter="@(() => ShowTooltip("Tipo Conformidad", $"{item.IdComentario}-tooltip0"))">
                                        <i class="bi bi-exclamation-circle-fill"></i>
                                    </div>
                                    <p>@item.TipoConformidad?.Tipos</p>
                                </div>

                                <div class="general">
                                    <div class="iconoGeneral" @ref="@(elementRefs[$"{item.IdComentario}-tooltip1"])" @onmouseenter="@(() => ShowTooltip("Fecha Comentario", $"{item.IdComentario}-tooltip1"))">
                                        <i class="bi bi-calendar-week-fill"></i>
                                    </div>
                                    <p>@item.FechaComentario</p>
                                </div>

                                <button @onclick="@(()=> ShowModal(item.IdComentario))" class="botonEdicion"><i class="bi bi-pencil-square"></i></button>

                            </div>

                        </div>

                        <div class="contenidoComentario">

                            <div class="informacionComentario">

                                <div class="textoInfo">
                                    <h5>Remitente</h5>
                                    <p>@item.Personal?.Nickname</p>
                                </div>

                                <div class="textoInfo">
                                    <h5>Destinatario</h5>
                                    <p>@item.Representante?.Nickname</p>
                                </div>

                                @if (item.ReporteInspeccion != null)
                                {
                                    <div class="textoInfo">
                                        <h5>Reporte Inspeccion</h5>
                                        <p>@item.ReporteInspeccion?.CodigoInspeccion</p>
                                    </div>
                                }
                                else
                                {
                                    
                                }

                            </div>

                            <div class="textoComentario">

                                <div class="seccionComentario">

                                    <p>@item.Comentario</p>

                                </div>

                            </div>

                        </div>

                    </div>
                }
            }
            else
            {
                <p>No se encontro resultados</p>
            }

            @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

        </div>

    </section>

    <section class="footer">

        <div class="paginacion">
            
            <PaginadoComentariosSiget PaginaActual="@paginaActual"
                                      TotalPaginas="@totalPaginas"
                                      OnPageChanged="HandlePageChanged">
            </PaginadoComentariosSiget>

        </div>

    </section>

</section>

@code
{
    // Objetos de modelos mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private APIResponse<List<ComentarioSigetDTO>>? respuestaComentarios;
    private List<TipoConformidadDTO>? listaTipoConformidad; 

    // Variables con valores cambiantes mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int tipo = 0;
    private string valorOrden = "Descendente";
    private string valorBusqueda = "";
    private string? ordenSeleccionada;
    private int? tipoSeleccionado;

    // Variables para Paginacion mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int paginaActual = 1;
    private int tamanoPagina = 6;
    private int registrosActuales;
    private int totalPaginas;

    // Modal mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Apartado Tooltips mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private Dictionary<string, ElementReference> elementRefs = new();

    void ShowTooltip(string content, string itemId)
    {
        if (elementRefs.ContainsKey(itemId))
        {
            var elementRef = elementRefs[itemId];
            var options = new TooltipOptions()
                {
                    Style = "background: var(--rz-secondary-light); color: var(--rz-white)",
                    Position = TooltipPosition.Left
                };
            tooltipService.Open(elementRef, content, options);
        }
    }

    // MetodoInicializador mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    protected override async Task OnInitializedAsync()
    {
        tituloService.AgregarTitulo("Apartado Comentarios");

        await CargarPagina(paginaActual, 0, "Descendente");
        listaTipoConformidad = await tipoConformidadService.MostrarTipoConformidad();

        //--------------------------------------------------------------

        await StartRegistro();

        await StartEdicion();
    }

    // Metodos Generales mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task OrdenarComentario(string valor)
    {
        if (ordenSeleccionada == valor)
        {
            ordenSeleccionada = null;
        }
        else
        {
            ordenSeleccionada = valor;
        }

        await CargarPagina(paginaActual, tipo, valor);
        valorOrden = valor;
    }

    private async Task FiltroTipo(int valor)
    {
        if (tipoSeleccionado == valor)
        {
            tipoSeleccionado = null;
            valor = 0;
        }
        else
        {
            tipoSeleccionado = valor;
        }

        await CargarPagina(paginaActual, valor, valorOrden);
        tipo = valor;
    }

    private async Task CargarPagina(int numeroPagina, int idTipo, string orden)
    {
        ParametrosPaginacion parametros = new()
            {
                NumeroPagina = numeroPagina,
                TamañoPagina = tamanoPagina,
                Orden = orden,
                Buscar = valorBusqueda,
                ID1 = idTipo
            };

        respuestaComentarios = await comentarioSigetService.MostrarComentarios(parametros);
        registrosActuales = respuestaComentarios.TotalRegistros;
        totalPaginas = (int)Math.Ceiling((double)registrosActuales / tamanoPagina);
        paginaActual = numeroPagina;
    }

    private async Task CargarComentarioBuscado(ChangeEventArgs e)
    {
        try
        {
            valorBusqueda = e.Value.ToString();

            if (valorBusqueda != "")
            {
                await CargarPagina(paginaActual, 0, valorOrden);
            }
            else
            {
                await CargarPagina(paginaActual, tipo, valorOrden);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"Error al realizar la solicitud: {ex.Message}");
            throw;
        }
    }

    // Handlers mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task HandlePageChanged(int newPage)
    {
        paginaActual = newPage;
        await CargarPagina(newPage, tipo, valorOrden);
    }

    // Modals mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task ShowModal(int ID)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium,
                Position = ModalPosition.Middle
            };

        var parametros = new ModalParameters().Add(nameof(ModalComentariosSiget.idComentario), ID);

        var modal = Modal.Show<ModalComentariosSiget>("Comentario Siget", parametros, options);
        var resultado = await modal.Result;

        if (resultado.Confirmed)
        {
            if (resultado.Data.ToString() == "Ejecucion Correcta")
            {
                await CargarPagina(paginaActual, tipo, valorOrden);
            }
        }

    }

    // Metodos Notificaciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    //-----------------------------------------------------------|

    public async Task ShowRegistro(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, tipo, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Registro Exitoso",
                Detail = "Datos agregados correctamente",
                Duration = 4000,
                CloseOnClick = true,
                Payload = DateTime.Now
            });
    }

    public async Task StartRegistro()
    {
        hubRegistroService.OnRegisterReceived += ShowRegistro;
        await hubRegistroService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async Task ShowEdicion(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, tipo, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Registro Actualizado",
                Detail = "Datos editados correctamente",
                Duration = 4000,
                CloseOnClick = true,
                Payload = DateTime.Now
            });
    }

    public async Task StartEdicion()
    {
        hubActualizacionService.OnRegisterEdited += ShowEdicion;
        await hubActualizacionService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async ValueTask DisposeAsync()
    {
        hubRegistroService.OnRegisterReceived -= ShowRegistro;
        await hubRegistroService.DisconnectAsync();

        hubActualizacionService.OnRegisterEdited -= ShowEdicion;
        await hubActualizacionService.DisconnectAsync();
    }

}
