@*

@inject IRequisitoMayorService requisitoService;
@inject IOrganismoService organismoService;
@inject IRepresentanteService representanteService;
<style>
    :root {
        --color-inputs: #afafe7;
    }
</style>

<h5 class="tituloModalAgregar">@titulo</h5>
<br />

<EditForm Model="requisito" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="contenedorInputs">

        <div class="parteInputsA">

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-person-circle"></i></span>
                <InputText type="text" class="form-control" @bind-Value="requisito.CodigoRequisito" placeholder="Agregar Codigo" style="border: 1px solid var(--color-inputs);"></InputText>
            </div>

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-telephone-fill"></i></span>
                <InputText type="" class="form-control" @bind-Value="requisito.Factibilidad" placeholder="Factibilidad" style="border: 1px solid var(--color-inputs);"></InputText>
            </div>

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-envelope-fill"></i></span>
                <InputText type="" class="form-control" @bind-Value="requisito.TotalFormularios" placeholder="Formularios" style="border: 1px solid var(--color-inputs);"></InputText>
            </div>

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-person-vcard-fill"></i></span>
                <InputText type="text" class="form-control" @bind-Value="" placeholder="Agregar DUI" style="border: 1px solid var(--color-inputs);"></InputText>
            </div>

        </div>

        <div class="parteInputsB">

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-calendar2-week-fill"></i></span>
                <InputDate class="form-control" TValue="DateTime" @bind-Value="" style="border: 1px solid var(--color-inputs);"></InputDate>
            </div>

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-person-badge-fill"></i></span>
                <InputText type="text" class="form-control" @bind-Value="" placeholder="Agregar Nickname" style="border: 1px solid var(--color-inputs);"></InputText>
            </div>

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-shield-lock-fill"></i></span>
                <InputText type="text" class="form-control" @bind-Value="" placeholder="Agregar Contraseña" style="border: 1px solid var(--color-inputs);"></InputText>
            </div>

            <div class="input-group mb-3">
                <span style="background-color: var(--color-inputs); border: 1px solid var(--color-inputs); color: white;" class="input-group-text" id="basic-addon1"><i class="bi bi-person-fill-gear"></i></span>
                <InputSelect class="form-select" @bind-Value="personal.IdRangoPersonal" style="border: 1px solid var(--color-inputs);">
                    <option value="0">Seleccionar Rango Personal...</option>
                    @foreach (var item in listaRango)
                    {
                        <option value="@item.IdRangoPersonal">@item.Rangos</option>
                    }
                </InputSelect>
            </div>

            <input type="hidden" value="@personal.IdEstadoPersonal" />

        </div>

    </div>

    <br />

    <button type="submit" class="btn btn-success botonEjecutar"><i class="bi bi-check-circle-fill"></i>&nbsp;&nbsp;@btnTexto</button>

</EditForm>

@code {

    [Parameter]
    public int idRequisitoEditar { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    //----------------------------------------------------------------------------------

    RequisitoMayorDTO requisito = new RequisitoMayorDTO();

    List<OrganismoDTO> listaOrganismo = new List<OrganismoDTO>();

    List<RepresentanteDTO> listaRepresentante = new List<RepresentanteDTO>();

    ParametrosPaginacion? pp;

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    //----------------------------------------------------------------------------------

    protected override async Task OnInitializedAsync()
    {
        pp = new ParametrosPaginacion()
            {
                NumeroPagina = 1,
                TamañoPagina = sizeof(int),
                Orden = "Ascendente"
            };

        APIResponse<List<OrganismoDTO>> resOrg = await organismoService.MostrarOrganismos(pp);
        APIResponse<List<RepresentanteDTO>> resRep = await representanteService.MostrarRepresentante(pp);

        if (idRequisitoEditar != 0)
        {
            requisito = await requisitoService.BuscarRequisitoMayor(idRequisitoEditar);
            btnTexto = "Actualizar Registro";
            titulo = "Editar Personal";
        }
        else
        {
            btnTexto = "Agregar Registro";
            titulo = "Agregar Personal";
            requisito.IdMayores = 1;
        }

        listaOrganismo = resOrg.Resultado;
        listaRepresentante = resRep.Resultado;
    }

    //----------------------------------------------------------------------------------

    private async Task OnValidSubmit()
    {
        string ValorDevuelto = "";

        if (idRequisitoEditar == 0)
        {
            ValorDevuelto = await requisitoService.CrearRequisitoMAyor(requisito);
        }
        else
        {
            ValorDevuelto = await requisitoService.EditarRequisito(requisito, idRequisitoEditar);
        }

        if (ValorDevuelto == "Ejecucion Correcta")
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(ValorDevuelto));
        }
    }

}
*@