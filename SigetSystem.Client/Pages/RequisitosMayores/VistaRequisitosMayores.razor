@page "/vistaRequisitosMayores"
@inject SweetAlertService Sweet;
@inject TituloService tituloService;
@inject IRequisitoMayorService requisitoService;
@inject IOrganismoService organismoService;
@inject IRepresentanteService representanteService;
@implements IAsyncDisposable;
@inject IHubRegistroService hubRegistroService;
@inject IHubActualizacionService hubActualizacionService;
@inject TooltipService tooltipService
@inject NotificationService NotificationService
@attribute [Authorize]


<section class="ContenedorGeneral">

    <h5 class="indice">Inicio > Administracion de Requisitos Mayores</h5>

    <section class="ContenidoPrincipal">

        <div class="barra">

            <div class="opciones">

                @* Apartado de Opciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

                <div class="tituloOpciones">
                    <p>Opciones de los requisitos</p>
                </div>

                <div class="botonesOpciones">

                    <button class="informe"><i class="bi bi-file-earmark-plus"></i> Reporte</button>

                </div>

                <div class="tituloOpciones">
                    <p>Buscador</p>
                </div>

                <input type="text"  @bind="valorBusqueda" @oninput="CargarRequisitoBuscado" class="buscador" placeholder="Buscar Registro" />

                @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            </div>

            <div class="filtro">

                @* Apartado de Filtros mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

                <div class="tituloFiltro">
                    <p>Filtros para los requisitos</p>
                </div>

                <div class="contenidoFiltro">

                    <div class="espacioFiltro">

                        <h5>Filtrar por orden:</h5>

                        <div class="contenedorChecks">

                            @* apartado checks 2 *@

                            <div class="contenCheck">
                                <input @onclick="@(() => OrdenarRequisitos("Ascendente"))" checked="@("Ascendente" == ordenSeleccionada)" type="checkbox" id="checkOrden1" name="checkOrden1" />
                                <label class="nombreCheck" for="checkOrden1">Ascendente</label>
                            </div>

                            <div class="contenCheck">
                                <input @onclick="@(() => OrdenarRequisitos("Descendente"))" checked="@("Descendente" == ordenSeleccionada)" type="checkbox" id="checkOrden2" name="checkOrden2" />
                                <label class="nombreCheck" for="checkOrden2">Descendente</label>
                            </div>

                        </div>

                    </div>

                   <div class="espacioFiltro">

                        <h5>Filtrar por tipo:</h5>

                        <div class="contenedorChecks">

                            <div class="contenCheck">
                                 
                                <label class="nombreCheck" for="">Filtrar por Personal</label>
                            </div>

                        </div>

                    </div>@*

                    <div class="espacioFiltro">

                        <h5>Filtrar por estado:</h5>

                        <div class="contenedorChecks">

                            apartado checks 1

                            <div class="contenCheck">
                                <input checked="" type="checkbox" id="" />
                                <label class="nombreCheck" for="">Estado 1</label>
                            </div>

                        </div>

                    </div> *@

                </div>

                @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            </div>

        </div>

        <div class="contenido">

            @* Apartado de Contenido mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            @if(resRequisito?.Resultado != null)
            {
                @foreach(var item in resRequisito.Resultado)
                {
                    <div class="tarjeta">

                        <div class="tarjetaTitulos">

                            <div class="tituloA">
                                <p>@item.CodigoRequisito</p>
                            </div>

                            <div class="tituloB">
                                <p>@item.FechaRegistro</p>
                            </div>

                        </div>

                        <div class="tarjetaContenido">

                            <div class="perfil">

                                <div class="apartadoA">

                                    <div class="texto">
                                        <div class="iconoTexto" @ref="@(elementRefs[$"{item.IdMayores}-tooltip0"])" @onmouseenter="@(() => ShowTooltip("Nombre OIA", $"{item.IdMayores}-tooltip0"))">
                                            <i class="bi bi-building-fill"></i>
                                        </div>
                                        <p>@item.Organismo?.NombreOIA</p>
                                    </div>

                                    <div class="texto">
                                        <div class="iconoTexto" @ref="@(elementRefs[$"{item.IdMayores}-tooltip1"])" @onmouseenter="@(() => ShowTooltip("Representante", $"{item.IdMayores}-tooltip1"))">
                                            <i class="bi bi-person-circle"></i>
                                        </div>
                                        <p>@item.Representante?.Nombres</p>
                                    </div>

                                    <div class="tituloChecks">
                                        <p>Apartado Checks</p>
                                    </div>

                                </div>

                                <div class="apartadoB">

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip2"])" @onmouseenter="@(() => ShowTooltip("Factibilidad", $"{item.IdMayores}-tooltip2"))">
                                            <i class="bi bi-check-circle-fill"></i>
                                        </div>
                                        <input class="mtp" checked="@(item.Factibilidad == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip3"])" @onmouseenter="@(() => ShowTooltip("Formulario Totales", $"{item.IdMayores}-tooltip3"))">
                                            <i class="bi bi-clipboard2-check-fill"></i>
                                        </div>
                                        <input checked="@(item.TotalFormularios == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip4"])" @onmouseenter="@(() => ShowTooltip("Copia Dui Propietario", $"{item.IdMayores}-tooltip4"))">
                                            <i class="bi bi-person-vcard-fill"></i>
                                        </div>
                                        <input checked="@(item.CopiaDuiPropietario == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip5"])" @onmouseenter="@(() => ShowTooltip("Copia Retira Certificado", $"{item.IdMayores}-tooltip5"))">
                                            <i class="bi bi-person-vcard"></i>
                                        </div>
                                        <input checked="@(item.CopiaDuiRetiro == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip6"])" @onmouseenter="@(() => ShowTooltip("Copia Dui Electricista", $"{item.IdMayores}-tooltip6"))">
                                            <i class="bi bi-person-vcard"></i>
                                        </div>
                                        <input checked="@(item.CopiaDuiElectricista == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip7"])" @onmouseenter="@(() => ShowTooltip("Copia Carnet Electricista", $"{item.IdMayores}-tooltip7"))">
                                            <i class="bi bi-card-heading"></i>
                                        </div>
                                        <input checked="@(item.CopiaCarnetElectricista == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip8"])" @onmouseenter="@(() => ShowTooltip("Planos Duales De Diseño Minimo", $"{item.IdMayores}-tooltip8"))">
                                            <i class="bi bi-map-fill"></i>
                                        </div>
                                        <input checked="@(item.PlanosDualesDeDiseñoMinimo == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip9"])" @onmouseenter="@(() => ShowTooltip("Planos Duales De Construccion", $"{item.IdMayores}-tooltip9"))">
                                            <i class="bi bi-map"></i>
                                        </div>
                                        <input checked="@(item.PlanosDualesDeConstruccion == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip10"])" @onmouseenter="@(() => ShowTooltip("Copia Factura De Materiales", $"{item.IdMayores}-tooltip10"))">
                                            <i class="bi bi-pass-fill"></i>
                                        </div>
                                        <input checked="@(item.CopiaFacturaDeMateriales == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip11"])" @onmouseenter="@(() => ShowTooltip("Copia Garantia De Transformador", $"{item.IdMayores}-tooltip11"))">
                                            <i class="bi bi-patch-check-fill"></i>
                                        </div>
                                        <input checked="@(item.CopiaGarantiaDeTransformador == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip12"])" @onmouseenter="@(() => ShowTooltip("Comprobante De Pago", $"{item.IdMayores}-tooltip12"))">
                                            <i class="bi bi-pass"></i>
                                        </div>
                                        <input checked="@(item.ComprobanteDePago == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip13"])" @onmouseenter="@(() => ShowTooltip("Memoria de Calculo", $"{item.IdMayores}-tooltip13"))">
                                            <i class="bi bi-file-medical-fill"></i>
                                        </div>
                                        <input checked="@(item.MemoriaDecalculo == true)" type="checkbox" id="" />
                                    </div>

                                    <div class="checks">
                                        <div class="iconoCheck" @ref="@(elementRefs[$"{item.IdMayores}-tooltip14"])" @onmouseenter="@(() => ShowTooltip("Autocad CD", $"{item.IdMayores}-tooltip14"))">
                                            <i class="bi bi-houses-fill"></i>
                                        </div>
                                        <input checked="@(item.AutocadCD == true)" type="checkbox" id="" />
                                    </div>

                                </div>

                            </div>

                            <div class="extras">

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip15"])" @onmouseenter="@(() => ShowTooltip("Dui Propietario (PDF)", $"{item.IdMayores}-tooltip15"))">
                                        <i class="bi bi-person-vcard-fill"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>DuiPropietario.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip16"])" @onmouseenter="@(() => ShowTooltip("Dui Retira Certificado (PDF)", $"{item.IdMayores}-tooltip16"))">
                                        <i class="bi bi-person-vcard"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>DuiRetiro.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip17"])" @onmouseenter="@(() => ShowTooltip("Dui Electricista (PDF)", $"{item.IdMayores}-tooltip17"))">
                                        <i class="bi bi-person-vcard"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>DuiElectricista.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip18"])" @onmouseenter="@(() => ShowTooltip("Carnet Electricista (PDF)", $"{item.IdMayores}-tooltip18"))">
                                        <i class="bi bi-card-heading"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>CarnetElectricista.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip19"])" @onmouseenter="@(() => ShowTooltip("Planos Diseño Minimo (PDF)", $"{item.IdMayores}-tooltip19"))">
                                        <i class="bi bi-map-fill"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>PlanosDiseñoMinimo.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip20"])" @onmouseenter="@(() => ShowTooltip("Planos Construccion (PDF)", $"{item.IdMayores}-tooltip20"))">
                                        <i class="bi bi-map"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>PlanosConstruccion.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip21"])" @onmouseenter="@(() => ShowTooltip("Factura Materiales (PDF)", $"{item.IdMayores}-tooltip21"))">
                                        <i class="bi bi-pass-fill"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>FacturaDeMateriales.pdf</p>
                                    </div>
                                </div>

                                <div class="textoExtra">
                                    <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdMayores}-tooltip22"])" @onmouseenter="@(() => ShowTooltip("Garantia Transformador (PDF)", $"{item.IdMayores}-tooltip22"))">
                                        <i class="bi bi-patch-check-fill"></i>
                                    </div>
                                    <div class="apartadoExtra">
                                        <p>Transformador.pdf</p>
                                    </div>
                                </div>

                            </div>

                        </div>

                    </div>
                }
            }
            else
            {
                <p>No se encontro resultados</p>
            }

            @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

        </div>

    </section>

    <section class="footer">

        <div class="paginacion">

            <PaginadoRequisitosMayores PaginaActual="@paginaActual"
                                       TotalPaginas="@totalPaginas"
                                       OnPageChanged="HandlePageChanged">
            </PaginadoRequisitosMayores>

        </div>

    </section>

</section>

@code
{
    // Objetos de modelos mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private APIResponse<List<RequisitoMayorDTO>>? resRequisito;
    private List<OrganismoDTO>? listaOrganimos;
    private List<RepresentanteDTO>? listaRepresentante;

    // Variables con valores cambiantes mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int ID1 = 0;
    private int ID2 = 0;
    private string valorOrden = "Descendente";
    private string valorBusqueda = "";
    private string? ordenSeleccionada;
    private int? rangoSeleccionado;
    private int? estadoSeleccionado;

    // Variables para Paginacion mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int paginaActual = 1;
    private int tamanoPagina = 6;
    private int registrosActuales;
    private int totalPaginas;

    // Modal mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Apartado Tooltips mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private Dictionary<string, ElementReference> elementRefs = new();

    void ShowTooltip(string content, string itemId)
    {
        if (elementRefs.ContainsKey(itemId))
        {
            var elementRef = elementRefs[itemId];
            var options = new TooltipOptions()
                {
                    Style = "background: var(--rz-secondary-light); color: var(--rz-white)",
                    Position = TooltipPosition.Left
                };
            tooltipService.Open(elementRef, content, options);
        }
    }

    // MetodoInicializador mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    protected override async Task OnInitializedAsync()
    {
        tituloService.AgregarTitulo("Administracion de Requisitos Mayores");

        ParametrosPaginacion parametros = new()
            {
                NumeroPagina = 1,
                TamañoPagina = tamanoPagina,
                Orden = "Ascendente",
                Buscar = valorBusqueda,
                ID1 = ID1,
                ID2 = ID2
            };

        await CargarPagina(paginaActual, 0, 0, "Descendente");
        var rOrg = await organismoService.MostrarOrganismos(parametros);
        var rRep = await representanteService.MostrarRepresentante(parametros);

        listaOrganimos = rOrg.Resultado;
        listaRepresentante = rRep.Resultado;

        //--------------------------------------------------------------

        await StartRegistro();

        await StartEdicion();

    }

    // Metodos Generales mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task OrdenarRequisitos(string valor)
    {
        if (ordenSeleccionada == valor)
        {
            ordenSeleccionada = null;
        }
        else
        {
            ordenSeleccionada = valor;
        }

        await CargarPagina(paginaActual, ID1, ID2, valor);
        valorOrden = valor;
    }

    private async Task CargarPagina(int numeroPagina, int ID1, int ID2 , string orden)
    {
        ParametrosPaginacion parametros = new()
            {
                NumeroPagina = numeroPagina,
                TamañoPagina = tamanoPagina,
                Orden = orden,
                Buscar = valorBusqueda,
                ID1 = ID1,
                ID2 = ID2
            };

        resRequisito = await requisitoService.MostrarRequisitoMayor(parametros);
        registrosActuales = resRequisito.TotalRegistros;
        totalPaginas = (int)Math.Ceiling((double)registrosActuales / tamanoPagina);
        paginaActual = numeroPagina;

    }

    private async Task CargarRequisitoBuscado(ChangeEventArgs e)
    {
        try
        {
            valorBusqueda = e.Value.ToString();

            if (valorBusqueda != "")
            {
                await CargarPagina(paginaActual, 0, 0, valorOrden);
            }
            else
            {
                await CargarPagina(paginaActual, ID1, ID2, valorOrden);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"Error al realizar la solicitud: {ex.Message}");
            throw;
        }
    }

    // Handlers mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task HandlePageChanged(int newPage)
    {
        paginaActual = newPage;
        await CargarPagina(newPage, ID1, ID2, valorOrden);
    }

    // Metodos Notificaciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    //-----------------------------------------------------------|

    public async Task ShowRegistro(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, ID1, ID2, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Registro Exitoso",
                Detail = "Datos agregados correctamente",
                Duration = 4000,
                CloseOnClick = true,
                Payload = DateTime.Now
            });
    }

    public async Task StartRegistro()
    {
        hubRegistroService.OnRegisterReceived += ShowRegistro;
        await hubRegistroService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async Task ShowEdicion(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, ID1, ID2, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Registro Actualizado",
                Detail = "Datos editados correctamente",
                Duration = 4000,
                CloseOnClick = true,
                Payload = DateTime.Now
            });
    }

    public async Task StartEdicion()
    {
        hubActualizacionService.OnRegisterEdited += ShowEdicion;
        await hubActualizacionService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async ValueTask DisposeAsync()
    {
        hubRegistroService.OnRegisterReceived -= ShowRegistro;
        await hubRegistroService.DisconnectAsync();

        hubActualizacionService.OnRegisterEdited -= ShowEdicion;
        await hubActualizacionService.DisconnectAsync();
    }

}
