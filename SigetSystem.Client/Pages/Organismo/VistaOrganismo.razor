@page "/vistaOrganismo"
@inject SweetAlertService Sweet;
@inject TituloService tituloService;
@inject IOrganismoService orgService;
@inject IPersonalService perService;
@inject IEstadoAcreditacionService acreService;
@implements IAsyncDisposable;
@inject IHubRegistroService hubRegistroService;
@inject IHubActualizacionService hubActualizacionService;
@inject TooltipService tooltipService
@inject NotificationService NotificationService
@attribute [Authorize]


<section class="ContenedorGeneral">

    <h5 class="indice">Inicio > Administracion de Organismos</h5>

    <section class="ContenidoPrincipal">

        <div class="barra">

            <div class="opciones">

                @* Apartado de Opciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

                <AuthorizeView Roles="Administrador">
                    <Authorized>

                        <div class="tituloOpciones">
                            <p>Opciones para el organismo</p>
                        </div>

                        <div class="botonesOpciones">

                            <button class="agregar" @onclick="@(()=> ShowModal(0))"><i class="bi bi-plus-circle"></i> Agregar</button>

                            <button class="informe"><i class="bi bi-file-earmark-plus"></i> Reporte</button>

                        </div>

                    </Authorized>
                    <NotAuthorized>

                        @* no se mostrara nada *@

                    </NotAuthorized>
                </AuthorizeView>

                <div class="tituloOpciones">
                    <p>Buscador</p>
                </div>

                <input type="text" @bind="valorBusqueda" @oninput="CargarOrganismosBuscados" class="buscador" placeholder="Buscar Registro" />

                @* <div class="botonesOpciones" style="margin-top: 15px; margin-bottom: 0px;">

                <button class="agregar" @onclick="@(()=> ShowModal(0))"><i class="bi bi-plus-circle"></i> Agregar</button>

                <button class="informe"><i class="bi bi-file-earmark-plus"></i> Reporte</button>

                </div> *@

                @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            </div>

            <div class="filtro">

                @* Apartado de Filtros mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

                <div class="tituloFiltro">
                    <p>Filtros para el organismo</p>
                </div>

                <div class="contenidoFiltro">

                    <div class="espacioFiltro">

                        <h5>Filtrar por orden:</h5>

                        <div class="contenedorChecks">

                            @* apartado checks 2 *@

                            <div class="contenCheck">
                                <input @onclick="@(() => OrdenarOrganismos("Ascendente"))" checked="@("Ascendente" == ordenSeleccionada)" type="checkbox" id="checkOrden1" name="checkOrden1" />
                                <label class="nombreCheck" for="checkOrden1">Ascendente</label>
                            </div>

                            <div class="contenCheck">
                                <input @onclick="@(() => OrdenarOrganismos("Descendente"))" checked="@("Descendente" == ordenSeleccionada)" type="checkbox" id="checkOrden2" name="checkOrden2" />
                                <label class="nombreCheck" for="checkOrden2">Descendente</label>
                            </div>

                        </div>

                    </div>

                    <div class="espacioFiltro">

                        <h5>Filtrar por estado:</h5>

                        <div class="contenedorChecks">

                            @* apartado checks 2 *@

                            @if (listaEstadoAcreditacion != null)
                            {
                                @foreach (var item in listaEstadoAcreditacion)
                                {
                                    <div class="contenCheck">
                                        <input @onclick="@(() => FiltroEstadoAcreditacion(item.IdEstadoAcreditacion))" checked="@(item.IdEstadoAcreditacion == estadoSeleccionado)" type="checkbox" id="@($"check{item.Estados}")" />
                                        <label class="nombreCheck" for="@($"check{item.Estados}")">@item.Estados</label>
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No se encontraron los estados</p>
                            }

                        </div>

                    </div>

                    @*<div class="espacioFiltro">

                    <h5>Filtrar por estado:</h5>

                    <div class="contenedorChecks">

                    @* apartado checks 1

                    <div class="contenCheck">
                    <input checked="" type="checkbox" id="" />
                    <label class="nombreCheck" for="">Estado 1</label>
                    </div>

                    </div>

                    </div>*@

                </div>

                @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            </div>

        </div>

        <div class="contenido">

            @* Apartado de Contenido mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

            @if (resOrg?.Resultado != null)
            {
                @foreach (var item in resOrg.Resultado)
                {
                    <div class="tarjeta">

                        <div class="perfil">

                            <p>@item.NombreOIA</p>

                            <div class="estadoIcon @($"color-{item.EstadoAcreditacion?.Estados}")" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip0"])" @onmouseenter="@(() => ShowTooltip("Estado Acreditacion", $"{item.IdOrganismo}-tooltip0"))">
                                <i class="bi bi-building-fill-exclamation"></i>
                            </div>

                        </div>

                        <div class="extras">

                            <div class="textoExtra miniEspacio">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip1"])" @onmouseenter="@(() => ShowTooltip("Nombre OIA", $"{item.IdOrganismo}-tooltip1"))">
                                    <i class="bi bi-building-fill"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p>@item.NombreOIA</p>
                                </div>
                            </div>

                            <div class="textoExtra">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip2"])" @onmouseenter="@(() => ShowTooltip("Email", $"{item.IdOrganismo}-tooltip2"))">
                                    <i class="bi bi-envelope-fill"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p class="correo">@item.Email</p>
                                </div>
                            </div>

                            <div class="textoExtra">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip3"])" @onmouseenter="@(() => ShowTooltip("Telefono", $"{item.IdOrganismo}-tooltip3"))">
                                    <i class="bi bi-telephone-fill"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p>@item.Telefono</p>
                                </div>
                            </div>

                            <div class="textoExtra">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip4"])" @onmouseenter="@(() => ShowTooltip("Codigo Unico", $"{item.IdOrganismo}-tooltip4"))">
                                    <i class="bi bi-c-circle-fill"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p>@item.CodigoUnico</p>
                                </div>
                            </div>

                            <div class="textoExtra">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip5"])" @onmouseenter="@(() => ShowTooltip("Estado Acreditacion", $"{item.IdOrganismo}-tooltip5"))">
                                    <i class="bi bi-building-fill-exclamation"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p>@item.EstadoAcreditacion?.Estados</p>
                                </div>
                            </div>

                            <div class="textoExtra">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip6"])" @onmouseenter="@(() => ShowTooltip("Responsable", $"{item.IdOrganismo}-tooltip6"))">
                                    <i class="bi bi-person-badge-fill"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p>@item.Responsable</p>
                                </div>
                            </div>

                            <div class="textoExtra">
                                <div class="iconoExtra" @ref="@(elementRefs[$"{item.IdOrganismo}-tooltip7"])" @onmouseenter="@(() => ShowTooltip("Personal", $"{item.IdOrganismo}-tooltip7"))">
                                    <i class="bi bi-person-circle"></i>
                                </div>
                                <div class="apartadoExtra">
                                    <p>@item.Personal?.Nickname</p>
                                </div>
                            </div>

                            <AuthorizeView Roles="Administrador">
                                <Authorized>

                                    <div class="textoExtra miniEspacio">

                                        <button class="edicion" @onclick="@(() => ShowModal(item.IdOrganismo))"><i class="bi bi-pencil-square"></i> Editar</button>

                                        @if (item.IdEstadoAcreditacion == 1)
                                        {
                                            <button class="rechazo" @onclick="(() => ModalLookup(item.IdOrganismo))"><i class="bi bi-x-circle"></i> Quitar</button>
                                        }
                                        else
                                        {
                                            <button class="rechazo" @onclick="(() => ModalLookup(item.IdOrganismo))"><i class="bi bi-check-circle"></i> Habilitar</button>
                                        }

                                    </div>

                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView Roles="Gerente">
                                <Authorized>

                                    <div class="textoExtra miniEspacio">

                                        @if (item.IdEstadoAcreditacion == 1)
                                        {
                                            <button class="rechazo" @onclick="(() => ModalLookup(item.IdOrganismo))"><i class="bi bi-x-circle"></i> Quitar</button>
                                        }
                                        else
                                        {
                                            <button class="rechazo" @onclick="(() => ModalLookup(item.IdOrganismo))"><i class="bi bi-check-circle"></i> Habilitar</button>
                                        }

                                    </div>

                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView Roles="Colaborador">
                                <Authorized>

                                    @* No se mostrara nada *@

                                </Authorized>
                            </AuthorizeView>

                        </div>

                    </div>
                }
            }
            else
            {
                <p>No se encontro resultados</p>
            }

            @* mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm *@

        </div>

    </section>

    <section class="footer">

        <div class="paginacion">

            <PaginadoOrganismo PaginaActual="@paginaActual"
                               TotalPaginas="@totalPaginas"
                               OnPageChanged="HandlePageChanged">
            </PaginadoOrganismo>

        </div>

    </section>

</section>

@code
{

    // Objetos de modelos mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private APIResponse<List<OrganismoDTO>>? resOrg;
    private List<EstadoAcreditacionDTO>? listaEstadoAcreditacion;
    private List<PersonalDTO> listaPersonalDto;

    // Variables con valores cambiantes mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int ID1 = 0;
    private int ID2 = 0;
    private string valorOrden = "Descendente";
    private string valorBusqueda = "";
    private string? ordenSeleccionada;
    private int? estadoSeleccionado;

    // Variables para Paginacion mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private int paginaActual = 1;
    private int tamanoPagina = 6;
    private int registrosActuales;
    private int totalPaginas;

    // Modal mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Apartado Tooltips mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private Dictionary<string, ElementReference> elementRefs = new();

    void ShowTooltip(string content, string itemId)
    {
        if (elementRefs.ContainsKey(itemId))
        {
            var elementRef = elementRefs[itemId];
            var options = new TooltipOptions()
                {
                    Style = "background: var(--rz-secondary-light); color: var(--rz-white)",
                    Position = TooltipPosition.Left
                };
            tooltipService.Open(elementRef, content, options);
        }
    }

    // MetodoInicializador mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    protected override async Task OnInitializedAsync()
    {
        tituloService.AgregarTitulo("Administracion de Organismos");

        ParametrosPaginacion parametros = new()
            {
                NumeroPagina = 1,
                TamañoPagina = tamanoPagina,
                Orden = "Ascendente",
                Buscar = valorBusqueda,
                ID1 = ID1,
                ID2 = ID2
            };



        await CargarPagina(paginaActual, 0, 0, "Ascendente");
        var r = await perService.MostrarPersonal(parametros);

        listaPersonalDto = r.Resultado;
        listaEstadoAcreditacion = await acreService.MostrarEstadoAcreditacion();

        //--------------------------------------------------------------

        await StartRegistro();

        await StartEdicion();
    }

    // Metodos Generales mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task OrdenarOrganismos(string valor)
    {
        if (ordenSeleccionada == valor)
        {
            ordenSeleccionada = null;
        }
        else
        {
            ordenSeleccionada = valor;
        }

        await CargarPagina(paginaActual, ID1, ID2, valor);
        valorOrden = valor;
    }

    private async Task FiltroEstadoAcreditacion(int valor)
    {
        if (estadoSeleccionado == valor)
        {
            estadoSeleccionado = null;
            valor = 0;
        }
        else
        {
            estadoSeleccionado = valor;
        }

        await CargarPagina(paginaActual, 0, valor, valorOrden);
        ID2 = valor;
    }

    private async Task CargarPagina(int numeroPagina, int ID1, int ID2, string orden)
    {
        ParametrosPaginacion parametros = new()
            {
                NumeroPagina = numeroPagina,
                TamañoPagina = tamanoPagina,
                Orden = orden,
                Buscar = valorBusqueda,
                ID1 = ID1,
                ID2 = ID2
            };

        resOrg = await orgService.MostrarOrganismos(parametros);
        registrosActuales = resOrg.TotalRegistros;

        if(registrosActuales > tamanoPagina)
        {
            totalPaginas = (int)Math.Ceiling((double)registrosActuales / tamanoPagina);
        }
        else
        {
            totalPaginas = 1;
        }
        
        paginaActual = numeroPagina;
    }

    private async Task CargarOrganismosBuscados(ChangeEventArgs e)
    {
        try
        {
            valorBusqueda = e.Value.ToString();

            if (valorBusqueda != "")
            {
                await CargarPagina(paginaActual, 0, 0, valorOrden);
            }
            else
            {
                await CargarPagina(paginaActual, ID1, ID2, valorOrden);
            }
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"Error al realizar la solicitud: {ex.Message}");
            throw;
        }
    }

    // Handlers mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task HandlePageChanged(int newPage)
    {
        paginaActual = newPage;
        await CargarPagina(newPage, ID1, ID2, valorOrden);
    }

    // Modals mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    private async Task ShowModal(int ID)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large,
                Position = ModalPosition.Middle
            };

        var parametros = new ModalParameters().Add(nameof(ModalOrganismo.idOrganismoEditar), ID);

        var modal = Modal.Show<ModalOrganismo>("Gestion Organismo", parametros, options);
        var resultado = await modal.Result;

        if (resultado.Confirmed)
        {
            if (resultado.Data.ToString() == "Ejecucion Correcta")
            {
                await CargarPagina(paginaActual, ID1, ID2, valorOrden);
            }
        }

    }

    private async Task ModalLookup(int id)
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium,
                Position = ModalPosition.Middle
            };

        var parametros = new ModalParameters().Add(nameof(ModalLookupOrganismo.idOrganismoKey), id);

        var modal = Modal.Show<ModalLookupOrganismo>("Cambiar estado Organismo", parametros, options);
        var resultado = await modal.Result;

        if (resultado.Confirmed)
        {
            if (resultado.Data.ToString() == "Ejecucion Correcta")
            {
                await CargarPagina(paginaActual, ID1, ID2, valorOrden);
            }
        }
    }

    // Metodos Notificaciones mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    //-----------------------------------------------------------|

    public async Task ShowRegistro(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, ID1, ID2, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Info,
            Summary = "Registro Exitoso",
            Detail = "Datos agregados correctamente",
            Duration = 4000,
            CloseOnClick = true,
            Payload = DateTime.Now
        });
    }

    public async Task StartRegistro()
    {
        hubRegistroService.OnRegisterReceived += ShowRegistro;
        await hubRegistroService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async Task ShowEdicion(string message)
    {
        Console.WriteLine(message);

        await CargarPagina(paginaActual, ID1, ID2, valorOrden);

        await InvokeAsync(StateHasChanged);

        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Warning,
            Summary = "Registro Actualizado",
            Detail = "Datos editados correctamente",
            Duration = 4000,
            CloseOnClick = true,
            Payload = DateTime.Now
        });
    }

    public async Task StartEdicion()
    {
        hubActualizacionService.OnRegisterEdited += ShowEdicion;
        await hubActualizacionService.ConnectAsync();
    }

    //-----------------------------------------------------------|

    public async ValueTask DisposeAsync()
    {
        hubRegistroService.OnRegisterReceived -= ShowRegistro;
        await hubRegistroService.DisconnectAsync();

        hubActualizacionService.OnRegisterEdited -= ShowEdicion;
        await hubActualizacionService.DisconnectAsync();
    }
    
}
